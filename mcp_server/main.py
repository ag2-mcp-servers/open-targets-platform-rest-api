# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:59:44+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query

app = MCPProxy(
    contact={
        'email': 'support@targetvalidation.org',
        'name': 'Open Targets Platform team',
    },
    description='### The Open Targets Platform REST API\n\nThe Open Targets Platform API (\'Application Programming Interface\') allows programmatic retrieval of the Open Targets Platform data via a set of [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.\n\nYou can make calls to the latest version of our API using the base URL `https://platform-api.opentargets.io/v3/platform`. Please make sure you use `https` instead of the unencrypted `http` calls, which we do not accept.\n\nWe list below the methods available to query our data directly from the API, followed by an interactive interface that you can use to try out the parameters and execute the REST-API calls.\n\nFor every request you create, the interactive interface will display both a [curl](https://curl.haxx.se/) command and a request URL that you can use to ensure you get the expected response before using your application or workflow. \n\nCheck our documentation for some [API tutorials](https://docs.targetvalidation.org/tutorials/api-tutorials) and [get in touch](mailto:support@targetvalidation.org) if you have any questions.\n\n### Available Methods\n\nThe available methods can be grouped in three types:\n\n* __public__ - Methods that serve the core set of our data. These are stable and we fully supported them.\n* __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods\nmay change without notice and should be used with caution.\n* __utils__ - Methods to get statistics and technical data about our API.\n\n### Supported formats\n\nThe methods above are all available via a `GET` request, and will serve outputs as `JSON`.\n\nAlternative output formats, such `xml`, `csv` and `tab`, are also available for some of the methods. However alternative output formats are not supported in interactive interface below where the response will be always in `JSON.\n\nIf you have complex queries with large number of parameters, you should use a `POST` request instead of  `GET`. \n`POST` methods require a body encoded as `json`. When querying for a specific disease using the latest version of the API, your call would look like the example below:\n\n```sh\ncurl -X POST -d \'{"disease":["EFO_0000253"]}\' --header \'Content-Type: application/json\' https://platform-api.opentargets.io/v3/platform/public/evidence/filter\n```\n### How to interpret a response\n\nEach HTTPS response will serve data in headers and body. The headers will give you details about your query, such as how long it took to run.\n\nIn the body of the response, you will find the data you have requested for in `JSON` format. The [jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.\n\n```sh\ncurl https://platform-api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq\n```\n\nWe do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API.\nRead more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).\n\nHow can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented?\nPlease [get in touch](mailto:support@targetvalidation.org) and send your suggestions.\n',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    title='Open Targets Platform REST API',
    version='19.02.1',
    servers=[{'url': '//platform-api.opentargets.io/v3'}],
)


@app.get(
    '/platform/docs',
    description=""" Access api docs as served by Redoc """,
    tags=['api_documentation_access', 'api_schema_info_retrieval'],
)
def get_api_docs():
    """
    Browse API documentation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/docs/swagger-ui',
    description=""" Interactive API docs using swagger-ui """,
    tags=['api_documentation_access', 'api_schema_info_retrieval'],
)
def get_api_swagger_u_i():
    """
    Browse interactive API documentation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/private/autocomplete',
    description=""" Search for the closest term to autocomplete in the search box.
 """,
    tags=['keyword_search_functions'],
)
def get_autocomplete(q: str, size: Optional[str] = None):
    """
    Get `autocomplete` objects.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/platform/private/besthitsearch',
    description=""" Fire the search method for multiple strings
 """,
    tags=['keyword_search_functions'],
)
def post_best_hit_search(body: str):
    """
    Find the best hit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/platform/private/disease',
    description=""" Get `disease` objects.
 """,
    tags=['disease_data_retrieval', 'keyword_search_functions'],
)
def post_disease_by_id(body: str):
    """
    Find information about a list of diseases
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/private/disease/{disease}',
    description=""" Get `disease` objects.
 """,
    tags=['disease_data_retrieval', 'association_data_management'],
)
def get_disease_by_id(disease: str):
    """
    Find information about a disease
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/private/drug/{DRUG_ID}',
    description=""" Get `drug` objects.
 """,
    tags=['drug_data_access'],
)
def get_drug_by_i_d(drug_id: str, d_r_u_g__i_d: str = Path(..., alias='DRUG_ID')):
    """
    Get drug by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/private/eco/{ECO_ID}',
    description=""" Get `ECO` objects.
 """,
    tags=['evidence_data_management'],
)
def get_e_c_oby_i_d(e_c_o__i_d: str = Path(..., alias='ECO_ID')):
    """
    Get evidence code by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/platform/private/enrichment/targets',
    description=""" Returns an enrichment analysis for a list of targets passed in the body
 """,
    tags=['keyword_search_functions', 'association_data_management'],
)
def post_enrichment_target(body: str):
    """
    Enrichment analysis
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/private/quicksearch',
    description=""" Get `search-result` objects. Enables search bar functionality.
 """,
    tags=['keyword_search_functions'],
)
def get_quick_search(q: str, size: Optional[str] = None):
    """
    Search most relevant results
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/platform/private/relation',
    description=""" Get `relation` objects.
 """,
    tags=['association_data_management', 'keyword_search_functions'],
)
def post_relation(body: str):
    """
    Find related entities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/private/relation/disease/{disease}',
    description=""" Get `relation` objects starting from diseases.
 """,
    tags=['disease_data_retrieval', 'association_data_management'],
)
def get_relation_by_e_f_o_i_d(disease: str):
    """
    Find related entities by disease
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/private/relation/target/{target}',
    description=""" Get `relation` objects starting from diseases.
 """,
    tags=['biological_target_query', 'association_data_management'],
)
def get_relation_by_e_n_s_g_i_d(target: str):
    """
    Find related entities by target
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/platform/private/target',
    description=""" Get `target` objects. Used for the target profile page.
 """,
    tags=['biological_target_query', 'association_data_management'],
)
def post_target_by_e_n_s_g_i_d(body: str):
    """
    Find information about a list of targets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/private/target/expression',
    description=""" Get `gene-expression` objects.
 """,
    tags=['biological_target_query'],
)
def get_target_expression_by_e_n_s_g_i_d(gene: str):
    """
    Query expression levels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/platform/private/target/expression',
    description=""" Get `gene-expression` objects.
 """,
    tags=[
        'disease_data_retrieval',
        'evidence_data_management',
        'biological_target_query',
    ],
)
def post_target_expression_by_e_n_s_g_i_d(body: str):
    """
    Batch query expression levels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/private/target/{target}',
    description=""" Get `target` objects.
 """,
    tags=['biological_target_query', 'keyword_search_functions'],
)
def get_target_by_e_n_s_g_i_d(target: str):
    """
    Find information about a target
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/public/association',
    description=""" Once we integrate all evidence connecting a target to a specific disease, we
 compute an association score by the means of an harmonic sum. This *association score* provides
 an indication of how strong the evidence behind each connection is and can be
 used to rank genes in order of likelihood as drug targets.
 The association ID is constructed by using the Ensembl ID of the gene and the
 EFO ID for the disease (e.g. ENSG00000073756-EFO_0003767).
 The method returns an association object, which contains the data and summary
 on each evidence type included in the calculation of the score, as well as the score itself.
 """,
    tags=['association_data_management'],
)
def get_association_by_id(id: str):
    """
    Get association by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/public/association/filter',
    description=""" More complex queries for associations scores and objects can be done using
this method, which allows to sort in different order, restrict to a specific class
of diseases or targets, as well as filtering results by score and associated pathways.
 """,
    tags=[
        'association_data_management',
        'biological_target_query',
        'disease_data_retrieval',
        'keyword_search_functions',
        'evidence_data_management',
    ],
)
def get_association_filter(
    target: Optional[str] = None,
    disease: Optional[str] = None,
    therapeutic_area: Optional[str] = None,
    datasource: Optional[str] = None,
    datatype: Optional[str] = None,
    pathway: Optional[str] = None,
    target_class: Optional[str] = None,
    uniprotkw: Optional[str] = None,
    direct: Optional[bool] = None,
    datastructure: Optional[str] = None,
    fields: Optional[str] = None,
    facets: Optional[bool] = False,
    scorevalue_min: Optional[float] = 0,
    scorevalue_max: Optional[float] = None,
    scorevalue_types: Optional[str] = None,
    size: Optional[float] = None,
    from_: Optional[float] = Query(None, alias='from'),
    format: Optional[str] = None,
    sort: Optional[str] = None,
    search: Optional[str] = None,
):
    """
    Filter available associations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/platform/public/association/filter',
    description=""" Complex queries and filters for association objects can also be submitted using a JSON
object and the equivalent POST method.
 """,
    tags=['association_data_management', 'disease_data_retrieval'],
)
def post_association_filter(body: str):
    """
    Batch query available associations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/public/evidence',
    description=""" We call **evidence** a unit of data that support a connection between a target and a disease.
The Open Targets Platform integrates multiple types of evidence including genetic associations,
somatic mutations, RNA expression and target-disease associations mined from the literature.
This method allows you to retrieve a single evidence item or a list of pieces of evidence by using their
targetvalidation.org ID.

Evidence IDs are unique within each data release (e.g. `8ed3d7568a8c6cac9c95cfb869bac762` for release 1.2).
You can obtain a list of evidence and their IDs from other API calls such as [/public/evidence/filter](#!/public/get_public_evidence_filter).

**Please note** that a specific evidence ID may change between data releases. We can not guarantee that a specific evidence ID will refer to the same piece of evidence connecting a target and its diseases.
 """,
    tags=['evidence_data_management'],
)
def get_evidence_by_id(id: str):
    """
    Get evidence by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/platform/public/evidence',
    description=""" This is the POST version of [/public/evidence](#!/public/get_public_evidence).
It allows to query for a list of evidence strings encoded in a `json` object to be passed in the body.
 """,
    tags=['evidence_data_management'],
)
def post_evidence_by_id(body: str):
    """
    Get evidence for a list of IDs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/public/evidence/filter',
    description=""" The filter method allows to retrieve the specific data that supports a connection between targets and diseases.
Filters can be used to restrict the results by source and type of data,
or limit results to targets which are part of a particular pathway.
Minimum and maximum scores can be specified as well as the type of evidence linking target and disease.
**Note** that multiple genes and diseases can be specified in the same request.
 """,
    tags=[
        'evidence_data_management',
        'disease_data_retrieval',
        'biological_target_query',
        'association_data_management',
        'keyword_search_functions',
    ],
)
def get_evidence_filter(
    target: Optional[str] = None,
    disease: Optional[str] = None,
    data_source: Optional[str] = Query(None, alias='data source'),
    datatype: Optional[str] = None,
    pathway: Optional[str] = None,
    uniprotkw: Optional[str] = None,
    datastructure: Optional[str] = None,
    fields: Optional[str] = None,
    scorevalue_min: Optional[float] = 0,
    scorevalue_max: Optional[float] = None,
    sort: Optional[str] = None,
    size: Optional[float] = None,
    from_: Optional[float] = Query(None, alias='from'),
    format: Optional[str] = None,
):
    """
    Filter available evidence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/platform/public/evidence/filter',
    description=""" POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter).
Filters can be specified as part of a `json` object in the body, simplifying the submission of queries.
 """,
    tags=['evidence_data_management', 'keyword_search_functions'],
)
def post_evidence_filter(body: str):
    """
    Batch filter available evidence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/public/search',
    description=""" This method allows you to look for gene or diseases of interest using a free text search,
replicating the functionality of the search box on our homepage. It should be used to identify
the best match for a disease or target of interest, rather than gathering a specific set of evidence.
 """,
    tags=[
        'disease_data_retrieval',
        'biological_target_query',
        'keyword_search_functions',
    ],
)
def get_search(
    q: str,
    size: Optional[str] = None,
    from_: Optional[str] = Query(None, alias='from'),
    filter: Optional[str] = None,
):
    """
    Search for a disease or a target
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/public/utils/metrics',
    description=""" Returns the metrics about associations and evidences, divided by datasource, genes and so on.
 """,
    tags=['data_release_metrics'],
)
def get_data_metrics():
    """
    Get metrics about the current data release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/public/utils/ping',
    description=""" Check if the API is up
 """,
    tags=['api_documentation_access'],
)
def get_ping():
    """
    Ping service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/public/utils/stats',
    description=""" Returns the number of associations and evidences, divided by datasource.
 """,
    tags=['data_release_metrics'],
)
def get_data_stats():
    """
    Get statistics about the current data release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/public/utils/therapeuticareas',
    description=""" Returns the list of therapeutic areas for the current data release
 """,
    tags=['data_release_metrics'],
)
def get_therapeutic_areas():
    """
    Get the list of therapeutic areas about the current data release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/public/utils/version',
    description=""" Returns current API version.
 """,
    tags=['api_schema_info_retrieval', 'api_documentation_access'],
)
def get_version():
    """
    Get API version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/platform/swagger',
    description=""" Get swagger.yaml specs for the API """,
    tags=['api_schema_info_retrieval', 'api_documentation_access'],
)
def get_swagger():
    """
    Get OpenAPI schema
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
